"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngMaterial","angularjs-dropdown-multiselect","ngDialog","angular-advanced-searchbox"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return"guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("careers"),function(app){app.registerModule("chat"),app.registerModule("chat.routes",["ui.router"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("core.profile",["core"]),ApplicationConfiguration.registerModule("messages"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("questions.comments"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("users.profile.routes"),angular.module("careers").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Careers",state:"careers",type:"dropdown",roles:["student","mentor"]}),Menus.addSubMenuItem("topbar","careers",{title:"List Careers",state:"careers.list"}),Menus.addSubMenuItem("topbar","careers",{title:"Create a Listing",state:"careers.create",roles:["student","mentor"]})}]),angular.module("careers").config(["$stateProvider",function($stateProvider){$stateProvider.state("careers",{"abstract":!0,url:"/careers",template:"<ui-view/>"}).state("careers.list",{url:"",templateUrl:"modules/careers/client/views/list-careers.client.view.html"}).state("careers.create",{url:"/create",templateUrl:"modules/careers/client/views/create-careers.client.view.html",data:{roles:["student","mentor"]}}).state("careers.view",{url:"/:articleId",templateUrl:"modules/careers/client/views/view-careers.client.view.html"}).state("careers.edit",{url:"/:articleId/edit",templateUrl:"modules/careers/client/views/edit-careers.client.view.html",data:{roles:["student","mentor"]}})}]),angular.module("careers").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("careers").factory("Articles",["$resource",function($resource){return $resource("api/careers/:careersId",{articleId:"@_id"},{update:{method:"PUT"}})}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat",roles:["mentor","admin","student"]})}angular.module("chat").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",controller:"ChatController",controllerAs:"vm",data:{roles:["student","mentor","admin"]}})}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){angular.module("chat").controller("ChatController",["$scope","$state","Authentication","Socket",function($scope,$state,Authentication,Socket){function init(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,init()}])}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core.profile").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Search Mentors",state:"profile.search",type:"item",roles:["admin","student"]})}]),function(){function MenuConfig(Menus){Menus.addMenu("account",{roles:["student","mentor"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["student","mentor"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(MenuConfig),MenuConfig.$inject=["Menus"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/","abstract":!0,template:"<ui-view/>",controller:"HomeController"}).state("home.mentor",{url:"student",templateUrl:"modules/core/client/views/mentor.client.view.html"}).state("home.student",{url:"mentor",templateUrl:"modules/core/client/views/student.client.view.html"}).state("home.default",{url:"",templateUrl:"modules/core/client/views/home.client.view.html"}).state("contact",{url:"/contact",templateUrl:"modules/core/client/views/contact.client.view.html"}).state("aboutus",{url:"/aboutus",templateUrl:"modules/core/client/views/aboutus.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("ContactFormController",["$scope","$http","$mdToast","$animate",function($scope,$http,$mdToast,$animate){$scope.toastPosition={bottom:!1,top:!0,left:!1,right:!0},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.sendMail=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","contactForm"),!1;var data={contactName:this.contactName,contactEmail:this.contactEmail,contactMsg:this.contactMsg};$http.post("/contact-form",data).success(function(data,status,headers,config){$scope.contactName="",$scope.contactEmail="",$scope.contactMsg="",$mdToast.show($mdToast.simple().content("Thanks for your message "+data.contactName+" we will get back to you soon!").position($scope.getToastPosition()).hideDelay(5e3))}).error(function(data,status,headers,config){$scope.error=data.message})}}]),angular.module("core").controller("DefaultController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.accountMenu=Menus.getMenu("account").items[0],$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),(new WOW).init(),angular.module("core").controller("HomeController",["$scope","Authentication","$state",function($scope,Authentication,$state){$scope.authentication=Authentication,""!==$scope.authentication.user?("mentor"===$scope.authentication.user.roles[0]&&$state.go("home.mentor"),"student"===$scope.authentication.user.roles[0]&&$state.go("home.student")):$state.go("home.default")}]),angular.module("core").controller("MentorController",["$scope","Authentication","$http",function($scope,Authentication,$http){$scope.authentication=Authentication,$http.get("/api/mentor/questions").then(function(successCallback){$scope.newQuestions=successCallback.data},function(errorCallback){console.log(errorCallback)}),$http.get("/api/messages").then(function(successCallback){$scope.messages=successCallback.data},function(errorCallback){console.log(errorCallback)}),$http.get("/api/topMentor").then(function(successCallback){$scope.topMentors=successCallback.data},function(errorCallback){console.log(errorCallback)}),$scope.passForMessages=function(index){$scope.messages.splice(index,1)},$scope.passForQuestions=function(index){$scope.newQuestions.splice(index,1)}}]),angular.module("core").controller("StudentController",["$scope","Authentication","$http",function($scope,Authentication,$http){$scope.authentication=Authentication,$http.get("/api/recommendedMentor/"+$scope.authentication.user.id).then(function(successCallback){$scope.mentors=successCallback.data},function(errorCallback){}),$http.get("/api/topMentor").then(function(successCallback){$scope.topMentors=successCallback.data},function(errorCallback){console.log(errorCallback)}),$http.get("/api/student/questions").then(function(successCallback){$scope.newQuestions=successCallback.data},function(errorCallback){}),$scope.passForQuestion=function(index){$scope.newQuestions.splice(index,1)},$scope.passForMentor=function(index){$scope.mentors.splice(index,1)}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["student","mentor"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("messages").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Messages",state:"messages.list",type:"item",roles:["admin","student","mentor"]})}]),angular.module("messages").config(["$stateProvider",function($stateProvider){$stateProvider.state("messages",{"abstract":!0,url:"/messages/:userId",template:"<ui-view/>"}).state("messages.create",{url:"/create",templateUrl:"modules/messages/client/views/messages.client.view.html",data:{roles:["student","mentor","admin"]}}).state("messages.view",{url:"/:messageId",templateUrl:"modules/messages/client/views/messages.client.view.html"}).state("messages.list",{url:"",templateUrl:"modules/messages/client/views/messages.client.view.html"})}]),angular.module("messages").controller("MessagesController",["$scope","$stateParams","$location","Authentication","Messages","$filter","$http","$window",function($scope,$stateParams,$location,Authentication,Messages,$filter,$http,$window){$scope.authentication=Authentication,$scope.create=function(convoId,isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","messageForm"),!1;var message=new Messages.lookup({content:this.content,conversationId:convoId});message.$save(function(response){$scope.showMessages=Messages.messageByIdLookUp.get({messageId:convoId}),$location.path("messages/"),$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message}),"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.authentication.user.id)},$scope.removeConvo=function(message){$http.post("/api/messages/"+message._id).then(function(response){for(var i=0;i<$scope.messages.length;i++)$scope.messages[i]._id===message._id&&($scope.messages.splice([i],1),$scope.showMessages=Messages.messageByIdLookUp.get({messageId:$scope.messages[0]._id}))},function(response){$scope.error=response.message})},$scope.find=function(messageId){$scope.showMessages=Messages.messageByIdLookUp.get({messageId:messageId})},$scope.formatDate=function(date){var dateOut=new Date(date);return dateOut},$scope.findMessages=function(){$scope.messages=Messages.lookup.query(function(data){if(""!==$stateParams.userId)$scope.showMessages=Messages.messageByIdLookUp.get({messageId:$stateParams.userId}),data[0].messages.length||($scope.content="Below is a potential template to initiate the conversation: \n\nHi ______, \n\nMy name is _________. I am currently studying ______ at _______. \nI am wondering  if you could help me with ____________. \n\nThanks, \n_______.");else if(0!==$scope.messages.length){for(var convoId,count=0;count<data.length;count++)convoId=data[0]._id,data[0].messages.length||($scope.content="Below is a potential template to initiate the conversation: \n\nHi ______, \n\nMy name is _________. I am currently studying ______ at _______. \nI am wondering  if you could help me with ____________. \n\nThanks, \n_______.");$scope.showMessages=Messages.messageByIdLookUp.get({messageId:convoId})}else $scope.messages=null,$scope.showMessages=null},function(error){console.log(error)})}}]),angular.module("messages").filter("cut",function(){return function(value,wordwise,max,tail){if(!value)return"";if(max=parseInt(max,10),!max)return value;if(value.length<=max)return value;if(value=value.substr(0,max),wordwise){var lastspace=value.lastIndexOf(" ");-1!==lastspace&&(("."===value.charAt(lastspace-1)||","===value.charAt(lastspace-1))&&(lastspace-=1),value=value.substr(0,lastspace))}return value+(tail||" …")}}),angular.module("messages").factory("Messages",["$resource",function($resource){return{lookup:$resource("api/messages",{},{update:{method:"PUT"}}),messageByIdLookUp:$resource("/api/messages/:messageId",{messageId:"@_id"},{update:{method:"PUT"}})}}]),angular.module("questions.comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("comments.addComment",{url:"/:id/comments",templateUrl:"modules/questions/client/views/view-question.client.view.html",controller:"QuestionsController"})}]),angular.module("questions").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Questions",state:"questions",type:"dropdown",roles:["mentor","admin","student"]}),Menus.addSubMenuItem("topbar","questions",{title:"List Questions",state:"questions.list"}),Menus.addSubMenuItem("topbar","questions",{title:"Create Questions",state:"questions.create"})}]),angular.module("questions").config(["$stateProvider",function($stateProvider){$stateProvider.state("questions",{"abstract":!0,url:"/questions",template:"<ui-view/>"}).state("questions.list",{url:"",templateUrl:"modules/questions/client/views/list-question.client.view.html"}).state("questions.create",{url:"/create",templateUrl:"modules/questions/client/views/create-question.client.view.html"}).state("questions.view",{url:"/:questionId",templateUrl:"modules/questions/client/views/view-question.client.view.html"}).state("questions.edit",{url:"/:questionId/edit",templateUrl:"modules/questions/client/views/edit-question.client.view.html"})}]),angular.module("questions").controller("QuestionsController",["$scope","$http","$stateParams","$location","Authentication","Comments","Questions","ngDialog","$filter",function($scope,$http,$stateParams,$location,Authentication,Comments,Questions,ngDialog,$filter){$scope.authentication=Authentication,$scope.currentUser=Authentication.user.id,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","questionForm"),!1;var question=new Questions({title:this.title,content:this.content});question.$save(function(response){$location.path("questions/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.upvote=function(questionId){for(var currentQuestion=$scope.pagedItems,i=0;i<$scope.pagedItems.length;i++)if(currentQuestion[i]._id===questionId){if(currentQuestion[i].user._id===$scope.currentUser)return void $scope.ownerQuestion();if(-1===currentQuestion[i].usersWhoUpvoted.indexOf($scope.currentUser)){var path="/api/questions/"+questionId+"/upvote";$http.post(path),location.reload()}else $scope.alreadyVoted()}"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.currentUser)},$scope.downvote=function(questionId){for(var currentQuestion=$scope.pagedItems,i=0;i<$scope.pagedItems.length;i++)if(currentQuestion[i]._id===questionId){if(currentQuestion[i].user._id===$scope.currentUser)return void $scope.ownerQuestion();if(-1===currentQuestion[i].usersWhoDownvoted.indexOf($scope.currentUser)){var path="/api/questions/"+questionId+"/downvote";$http.post(path),location.reload()}else $scope.alreadyVoted()}"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.currentUser)},$scope.addComment=function(){var comment=new Comments({body:this.comment,question:this.question.question});""!==$scope.comment&&(comment.$save({id:$stateParams.questionId},function(response){location.reload(),$scope.body=""},function(errorResponse){$scope.error=errorResponse.data.message}),"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.currentUser))},$scope.upvoteComment=function(questionId,commentId){for(var currentQuestion=$scope.pagedItems,comments="",i=0;i<$scope.pagedItems.length;i++)currentQuestion[i]._id===questionId&&(comments=currentQuestion[i].comments);for(var commentIndex=-1,index=0;index<comments.length;index+=1)if(comments[index]._id===commentId){commentIndex=index;break}if(-1!==commentIndex){var comment=comments[commentIndex];if(comment.user._id===$scope.currentUser)return void $scope.ownerComment();if(-1===comment.usersWhoUpvoted.indexOf($scope.currentUser)){var path="/api/questions/"+questionId+"/upvoteComments/"+commentId;$http.post(path),location.reload()}else $scope.votedComment();"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.currentUser)}},$scope.downvoteComment=function(questionId,commentId){for(var currentQuestion=$scope.pagedItems,comments="",i=0;i<$scope.pagedItems.length;i++)currentQuestion[i]._id===questionId&&(comments=currentQuestion[i].comments);for(var commentIndex=-1,index=0;index<comments.length;index+=1)if(comments[index]._id===commentId){commentIndex=index;break}if(-1!==commentIndex){var comment=comments[commentIndex];if(comment.user._id===$scope.currentUser)return void $scope.ownerComment();if(-1===comment.usersWhoDownvoted.indexOf($scope.currentUser)){var path="/api/questions/"+questionId+"/downvoteComments/"+commentId;$http.post(path),location.reload()}else $scope.votedComment();"mentor"===$scope.authentication.user.roles[0]&&$http.post("/api/points/"+$scope.currentUser)}},$scope.remove=function(question){if(question){question.$remove();for(var i in $scope.question)$scope.question[i]===question&&$scope.question.splice(i,1)}else $scope.question.$remove(function(){$location.path("questions")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","questionsForm"),!1;var question=$scope.question;question.$update(function(){$location.path("questions/"+question._id)},function(errorResponse){$scope.error=errorResponse.data.message})},Questions.query(function(data){$scope.questions=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=4,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.questions,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.findOne=function(){$scope.question=Questions.get({questionId:$stateParams.questionId},function(successResponse){successResponse.usersWhoUpvoted.length>0?$scope.upvotedOrNot=-1===successResponse.usersWhoUpvoted.indexOf($scope.currentUser._str):$scope.upvotedOrNot=!1,successResponse.usersWhoDownvoted.length>0?$scope.downvotedOrNot=-1===successResponse.usersWhoDownvoted.indexOf($scope.currentUser._str):$scope.downvotedOrNot=!1,$scope.buildPagerForOneQuestion()},function(errorResponse){console.log(errorResponse)})},$scope.buildPagerForOneQuestion=function(){$scope.pagedItemsForOneQuestion=[],$scope.itemsPerPageForOneQuestion=4,$scope.currentPageForOneQuestion=1,$scope.figureOutItemsToDisplayForOneQuestion()},$scope.figureOutItemsToDisplayForOneQuestion=function(){$scope.filteredItemsForOneQuestion=$filter("filter")($scope.question.comments,{$:$scope.search}),$scope.filterLengthForOneQuestion=$scope.filteredItemsForOneQuestion.length;var begin=($scope.currentPageForOneQuestion-1)*$scope.itemsPerPageForOneQuestion,end=begin+$scope.itemsPerPageForOneQuestion;$scope.pagedItemsForOneQuestion=$scope.filteredItemsForOneQuestion.slice(begin,end)},$scope.pageChangedForOneQuestion=function(){$scope.figureOutItemsToDisplayForOneQuestion()},$scope.alreadyVoted=function(){ngDialog.open({template:"firstDialogId"})},$scope.ownerQuestion=function(){ngDialog.open({template:"ownerQuestion"})},$scope.votedComment=function(){ngDialog.open({template:"votedComment"})},$scope.ownerComment=function(){ngDialog.open({template:"ownerComment"})}}]),angular.module("questions.comments").factory("Comments",["$resource",function($resource){return $resource("api/questions/:id/comments",{update:{method:"PUT"}})}]),angular.module("questions").factory("Questions",["$resource",function($resource){return $resource("api/questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.profile.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{"abstract":!0,url:"/mentorSearch",template:"<ui-view/>",data:{roles:["mentor","student"]}}).state("profile.search",{url:"",templateUrl:"modules/users/client/views/profile/profile.client.view.html",controller:"MentorListController"}).state("profile.view",{url:"/users/:userId/profile",templateUrl:"/modules/users/client/views/profile/view-profile.client.view.html",controller:"DisplayUserProfileController"})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["mentor","admin","student","newUser"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.role",{url:"/role",templateUrl:"modules/users/client/views/settings/choose-role.html",data:{roles:["newUser"]}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"
}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$window.location.href="/settings/role"}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("core.profile").controller("MentorListController",["$scope","$filter","Profile","$http","$location",function($scope,$filter,Profile,$http,$location){Profile.Users.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.searchParams={},$scope.availableSearchParams=[{key:"firstname",name:"Firstname",placeholder:"Name..."},{key:"location",name:"Location",placeholder:"Location..."},{key:"education",name:"Education",placeholder:"Education..."},{key:"experience",name:"Company",placeholder:"Company..."},{key:"interests",name:"Interest",placeholder:"Interest..."},{key:"helpswith",name:"Helps with",placeholder:"Helps with...",suggestedValues:["cv","general advice","interviews"],restrictToSuggestedValues:!0}],$scope.$on("advanced-searchbox:addedSearchParam",function(event,searchParameter){}),$scope.$on("advanced-searchbox:removedSearchParam",function(event,searchParameter){}),$scope.$on("advanced-searchbox:removedAllSearchParam",function(event){}),$scope.$on("advanced-searchbox:enteredEditMode",function(event,searchParameter){}),$scope.$on("advanced-searchbox:leavedEditMode",function(event,searchParameter){}),$scope.$on("advanced-searchbox:modelUpdated",function(event,model){Profile.Search.query(model,function(result){$scope.users=result,$scope.buildPager()})}),$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.sendMessage=function(userId){$scope.messages=Profile.Messages.get({recipientId:userId},function(successResponse){var result=JSON.stringify($scope.messages);if(2===Object.keys(result).length){var path="/api/messages/create/"+userId;$http.post(path).then(function(success){var messageId=success.data._id;$location.path("messages/"+messageId)},function(error){console.log(error)})}else{var messageId=successResponse._id;$location.path("messages/"+messageId)}},function(errorResponse){console.log(errorResponse)})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("ChangeRole",["$scope","$timeout","$window","Authentication","Users",function($scope,$timeout,$window,Authentication,Users){$scope.user=Authentication.user,$scope.updateUserProfile=function(){var user=new Users($scope.user);user.roles="mentor",user.$update(function(response){Authentication.user=response,$window.location.href="/settings/profile"},function(response){$scope.error=response.data.message})},$scope.updateUserProfileRoleStudent=function(){var user=new Users($scope.user);user.roles="student",user.$update(function(response){Authentication.user=response,$window.location.href="/settings/profile"},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.eduD={},$scope.eduD.sdt=[],$scope.eduD.edt=[];for(var i=0;i<$scope.user.profile.education.length;i+=1)$scope.eduD.sdt.push({dt:new Date($scope.user.profile.education[i].startDate)}),$scope.eduD.edt.push({dt:new Date($scope.user.profile.education[i].endDate)});for($scope.expD={},$scope.expD.sdt=[],$scope.expD.edt=[],i=0;i<$scope.user.profile.experience.length;i+=1)$scope.expD.sdt.push({dt:new Date($scope.user.profile.experience[i].startDate)}),$scope.expD.edt.push({dt:new Date($scope.user.profile.experience[i].endDate)});for($scope.awardD={},$scope.awardD.sdt=[],i=0;i<$scope.user.profile.awards.length;i+=1)$scope.awardD.sdt.push({dt:new Date($scope.user.profile.awards[i].date)});$scope.addNewEducation=function(){$scope.user.profile.education.push({schoolName:"",description:"",startDate:new Date,endDate:new Date,courseTitle:""}),$scope.eduD.sdt.push({dt:new Date($scope.user.profile.education[$scope.user.profile.education.length-1].startDate)}),$scope.eduD.edt.push({dt:new Date($scope.user.profile.education[$scope.user.profile.education.length-1].endDate)})},$scope.removeEducation=function(index){$scope.user.profile.education.splice(index,1),$scope.eduD.sdt.splice(index,1),$scope.eduD.edt.splice(index,1)},$scope.addNewExperience=function(){$scope.user.profile.experience.push({company:"",description:"",startDate:new Date,endDate:new Date}),$scope.expD.sdt.push({dt:new Date($scope.user.profile.experience[$scope.user.profile.experience.length-1].startDate)}),$scope.expD.edt.push({dt:new Date($scope.user.profile.experience[$scope.user.profile.experience.length-1].endDate)})},$scope.removeExperience=function(index){$scope.user.profile.experience.splice(index,1),$scope.expD.sdt.splice(index,1),$scope.expD.edt.splice(index,1)},$scope.addNewAward=function(){$scope.user.profile.awards.push({title:"",description:"",issuer:"",date:new Date}),$scope.awardD.sdt.push({dt:new Date($scope.user.profile.awards[$scope.user.profile.awards.length-1].date)})},$scope.removeAward=function(index){$scope.user.profile.awards.splice(index,1),$scope.awardD.sdt.splice(index,1)},$scope.addNewInterest=function(){$scope.user.profile.interests.push({item:""})},$scope.removeInterest=function(index){$scope.user.profile.interests.splice(index,1)},$scope.addNewLink=function(){$scope.user.profile.links.push({url:""})},$scope.removeLink=function(index){$scope.user.profile.links.splice(index,1)},0===$scope.user.profile.education.length&&$scope.addNewEducation(),0===$scope.user.profile.experience.length&&$scope.addNewExperience(),0===$scope.user.profile.awards.length&&$scope.addNewAward(),0===$scope.user.profile.interests.length&&$scope.addNewInterest(),0===$scope.user.profile.links.length&&$scope.addNewLink(),$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.profile.description=$scope.user.profile.description,user.profile.education=$scope.user.profile.education,user.profile.experience=$scope.user.profile.experience,user.profile.interests=$scope.user.profile.interests,user.profile.links=$scope.user.profile.links,user.profile.awards=$scope.user.profile.awards,user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("core.profile").controller("DisplayUserProfileController",["$scope","$state","Authentication","$stateParams","$http","Profile","$location",function($scope,$state,Authentication,$stateParams,$http,Profile,$location){$scope.authentication=Authentication;var path="/api/users/"+$stateParams.userId;$http.get(path).success(function(data){$scope.user=data,$scope.eduD={},$scope.eduD.sdt=[],$scope.eduD.edt=[];for(var i=0;i<$scope.user.profile.education.length;i+=1)$scope.eduD.sdt.push({dt:new Date($scope.user.profile.education[i].startDate)}),$scope.eduD.edt.push({dt:new Date($scope.user.profile.education[i].endDate)});for($scope.expD={},$scope.expD.sdt=[],$scope.expD.edt=[],i=0;i<$scope.user.profile.experience.length;i+=1)$scope.expD.sdt.push({dt:new Date($scope.user.profile.experience[i].startDate)}),$scope.expD.edt.push({dt:new Date($scope.user.profile.experience[i].endDate)});for($scope.awardD={},$scope.awardD.sdt=[],i=0;i<$scope.user.profile.awards.length;i+=1)$scope.awardD.sdt.push({dt:new Date($scope.user.profile.awards[i].date)})}),$scope.sendMessage=function(userId){$scope.messages=Profile.Messages.get({recipientId:userId},function(successResponse){var result=JSON.stringify($scope.messages);if(2===Object.keys(result).length){var path="/api/messages/create/"+userId;$http.post(path).then(function(success){var messageId=success.data._id;$location.path("messages/"+messageId)},function(error){console.log(error)})}else{var messageId=successResponse._id;$location.path("messages/"+messageId)}},function(errorResponse){console.log(errorResponse)})}}]),angular.module("users").directive("verifyPassword",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ctrl){scope.$watch(function(){var combined;return(scope.passwordVerify||ctrl.$viewValue)&&(combined=scope.passwordVerify+"_"+ctrl.$viewValue),combined},function(value){value&&ctrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void ctrl.$setValidity("passwordVerify",!1):(ctrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core.profile").factory("Profile",["$resource",function($resource){return{Users:$resource("api/users"),Search:$resource("api/search"),Messages:$resource("api/messages/create/:recipientId")}}]);